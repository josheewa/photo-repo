import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import { useRouter } from 'next/router'
import { useEffect, useRef } from 'react'
import Modal from '../components/Modal'
import cloudinary from '../utils/cloudinary'
import getBase64ImageUrl from '../utils/generateBlurPlaceholder'
import { useLastViewedPhoto } from '../utils/useLastViewedPhoto'
import React, { useState } from 'react'
import TagSelector from '../components/TagSelector'

const Home = ({ cloudinaryData }) => {
  const cloudinaryCloudName = process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME
  const cloudinaryApiKey = process.env.CLOUDINARY_API_KEY
  const cloudinaryApiSecret = process.env.CLOUDINARY_API_SECRET
  const cloudinaryConfig = {
    cloud_name: cloudinaryCloudName,
    api_key: cloudinaryApiKey,
    api_secret: cloudinaryApiSecret,
  }

  // Example usage with Cloudinary API
  const cloudinary = require('cloudinary').v2
  cloudinary.config(cloudinaryConfig)



  // const [selectedTags, setSelectedTags] = useState([])
  const allTags = ['landscape', 'city', 'flowers', 'astro']

  const fetchImages = async () => {
    try {
      // Perform Cloudinary search based on selected tags
      const results = await cloudinary.v2.search
        .expression(`resource_type:image AND tags=${allTags.join(',')}`)
        .sort_by('public_id', 'desc')
        .max_results(400)
        .execute()

      // Process and format the fetched data
      let reducedResults = []
      let i = 0
      for (let result of results.resources) {
        reducedResults.push({
          id: i,
          height: result.height,
          width: result.width,
          public_id: result.public_id,
          format: result.format,
        })
        i++
      }

      // Fetch base64 data URLs for blurred images
      const blurImagePromises = results.resources.map((image) => {
        return getBase64ImageUrl(image)
      })
      const imagesWithBlurDataUrls = await Promise.all(blurImagePromises)

      // Add blurDataUrl to the reducedResults
      for (let i = 0; i < reducedResults.length; i++) {
        reducedResults[i].blurDataUrl = imagesWithBlurDataUrls[i]
      }

      // Update the state with the fetched images
      setImages(reducedResults)
    } catch (error) {
      console.error('Error fetching images:', error)
    }
  }

  useEffect(() => {
    // Fetch images when selectedTags change on the client side
    if (typeof window !== 'undefined') {
      fetchImages()
    }
  }, [selectedTags])

  return (
    <>
     
    </>
  )
}
export default Home